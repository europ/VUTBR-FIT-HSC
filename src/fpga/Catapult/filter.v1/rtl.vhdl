-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.0c/745553 Production Release
--  HLS Date:       Wed Oct 11 16:38:17 PDT 2017
-- 
--  Generated by:   Fitkit@DESKTOP-NJUNEBJ
--  Generated date: Sat Dec 15 16:31:57 2018
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_3_10_640_7_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE work.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_3_10_640_7_gen IS
  PORT(
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    re : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    we_d : IN STD_LOGIC;
    re_d : IN STD_LOGIC;
    q_d : OUT STD_LOGIC_VECTOR (2 DOWNTO 0)
  );
END Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_3_10_640_7_gen;

ARCHITECTURE v1 OF Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_3_10_640_7_gen IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  we <= (we_d);
  d <= (d_d);
  wadr <= (wadr_d);
  re <= (re_d);
  q_d <= q;
  radr <= (radr_d);
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    Xilinx_RAMS_BLOCK_SPRAM_RBW_rwport_32_9_512_4_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE work.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY Xilinx_RAMS_BLOCK_SPRAM_RBW_rwport_32_9_512_4_gen IS
  PORT(
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    q : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    adr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    adr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    we_d : IN STD_LOGIC;
    q_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    ram_rw_A_internal_RMASK_B_d : IN STD_LOGIC
  );
END Xilinx_RAMS_BLOCK_SPRAM_RBW_rwport_32_9_512_4_gen;

ARCHITECTURE v1 OF Xilinx_RAMS_BLOCK_SPRAM_RBW_rwport_32_9_512_4_gen IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  we <= (we_d);
  d <= (d_d);
  q_d <= q;
  adr <= (adr_d);
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    filter_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE work.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY filter_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
    buffer_buf_vinit_C_1_tr0 : IN STD_LOGIC
  );
END filter_core_core_fsm;

ARCHITECTURE v1 OF filter_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for filter_core_core_fsm_1
  TYPE filter_core_core_fsm_1_ST IS (core_rlp_C_0, buffer_buf_vinit_C_0, buffer_buf_vinit_C_1,
      main_C_0, main_C_1, main_C_2, main_C_3);

  SIGNAL state_var : filter_core_core_fsm_1_ST;
  SIGNAL state_var_NS : filter_core_core_fsm_1_ST;

BEGIN
  -- Default Constant Signal Assignments

  filter_core_core_fsm_1 : PROCESS (buffer_buf_vinit_C_1_tr0, state_var)
  BEGIN
    CASE state_var IS
      WHEN buffer_buf_vinit_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000010");
        state_var_NS <= buffer_buf_vinit_C_1;
      WHEN buffer_buf_vinit_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000100");
        IF ( buffer_buf_vinit_C_1_tr0 = '1' ) THEN
          state_var_NS <= buffer_buf_vinit_C_0;
        ELSE
          state_var_NS <= main_C_0;
        END IF;
      WHEN main_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0001000");
        state_var_NS <= main_C_1;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0010000");
        state_var_NS <= main_C_2;
      WHEN main_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "0100000");
        state_var_NS <= main_C_3;
      WHEN main_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "1000000");
        state_var_NS <= main_C_0;
      -- core_rlp_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "0000001");
        state_var_NS <= buffer_buf_vinit_C_0;
    END CASE;
  END PROCESS filter_core_core_fsm_1;

  filter_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= core_rlp_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS filter_core_core_fsm_1_REG;

END v1;

-- ------------------------------------------------------------------
--  Design Unit:    filter_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE work.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY filter_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    in_data_rsc_z : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    in_data_rsc_lz : OUT STD_LOGIC;
    in_data_vld_rsc_z : IN STD_LOGIC;
    out_data_rsc_z : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    out_data_rsc_lz : OUT STD_LOGIC;
    mcu_data_rsci_adr_d : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    mcu_data_rsci_d_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    mcu_data_rsci_we_d : OUT STD_LOGIC;
    mcu_data_rsci_q_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    mcu_data_rsci_ram_rw_A_internal_RMASK_B_d : OUT STD_LOGIC;
    buffer_buf_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    buffer_buf_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    buffer_buf_rsci_d_d : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    buffer_buf_rsci_we_d : OUT STD_LOGIC;
    buffer_buf_rsci_re_d : OUT STD_LOGIC;
    buffer_buf_rsci_q_d : IN STD_LOGIC_VECTOR (2 DOWNTO 0)
  );
END filter_core;

ARCHITECTURE v1 OF filter_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL in_data_rsci_ld : STD_LOGIC;
  SIGNAL in_data_rsci_d : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL in_data_vld_rsci_d : STD_LOGIC;
  SIGNAL out_data_rsci_ld : STD_LOGIC;
  SIGNAL out_data_rsci_d_0 : STD_LOGIC;
  SIGNAL fsm_output : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL if_if_if_and_tmp : STD_LOGIC;
  SIGNAL pixel_processing_if_if_acc_tmp : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL clip_window_clip_window_nor_tmp : STD_LOGIC;
  SIGNAL clip_window_clip_window_nor_1_tmp : STD_LOGIC;
  SIGNAL system_input_system_input_or_tmp : STD_LOGIC;
  SIGNAL clip_window_clip_window_and_1_tmp : STD_LOGIC;
  SIGNAL clip_window_clip_window_and_tmp : STD_LOGIC;
  SIGNAL and_2_tmp : STD_LOGIC;
  SIGNAL system_input_system_input_nand_tmp : STD_LOGIC;
  SIGNAL or_dcpl : STD_LOGIC;
  SIGNAL and_dcpl_11 : STD_LOGIC;
  SIGNAL and_dcpl_33 : STD_LOGIC;
  SIGNAL and_dcpl_44 : STD_LOGIC;
  SIGNAL and_dcpl_45 : STD_LOGIC;
  SIGNAL and_dcpl_57 : STD_LOGIC;
  SIGNAL nor_tmp_4 : STD_LOGIC;
  SIGNAL mux_tmp_3 : STD_LOGIC;
  SIGNAL and_dcpl_64 : STD_LOGIC;
  SIGNAL or_tmp_33 : STD_LOGIC;
  SIGNAL or_tmp_42 : STD_LOGIC;
  SIGNAL or_tmp_48 : STD_LOGIC;
  SIGNAL or_tmp_56 : STD_LOGIC;
  SIGNAL mcu_ready_sva : STD_LOGIC;
  SIGNAL pixel_processing_threshold_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_frame_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL system_input_c_sva : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL system_input_r_sva : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL system_input_c_filter_sva : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL system_input_r_filter_sva : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL system_input_output_vld_sva : STD_LOGIC;
  SIGNAL system_input_window_4_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL system_input_window_3_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL system_input_window_5_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL system_input_window_6_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL system_input_window_7_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL system_input_window_8_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_buf_vinit_ndx_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_sel_1_0_sva_1 : STD_LOGIC;
  SIGNAL if_if_if_and_mdf_sva_2 : STD_LOGIC;
  SIGNAL else_io_read_in_data_vld_rsc_svs : STD_LOGIC;
  SIGNAL system_input_din_sva_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_sel_1_0_sva_dfm : STD_LOGIC;
  SIGNAL buffer_t0_sva_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL clip_window_first_row_0_sva_5 : STD_LOGIC;
  SIGNAL clip_window_last_row_0_sva_7 : STD_LOGIC;
  SIGNAL clip_window_last_col_0_sva_3 : STD_LOGIC;
  SIGNAL system_input_output_vld_sva_dfm : STD_LOGIC;
  SIGNAL system_input_land_1_lpi_1_dfm_1 : STD_LOGIC;
  SIGNAL median_max2_5_1_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_4_2_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_3_2_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_2_2_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_1_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_4_1_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_6_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_5_3_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_7_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_if_if_1_pixel_processing_if_if_1_if_and_svs_1 : STD_LOGIC;
  SIGNAL buffer_buf_buffer_buf_nor_itm_1 : STD_LOGIC;
  SIGNAL buffer_buf_acc_itm_2 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL median_max_5_lpi_1_dfm_5 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL asn_itm : STD_LOGIC;
  SIGNAL else_io_read_in_data_vld_rsc_svs_st_1 : STD_LOGIC;
  SIGNAL buffer_acc_1_itm_2 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL buffer_acc_3_itm_2 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL buffer_slc_buffer_c_5_0_1_itm_2 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL system_input_output_vld_sva_dfm_st_1 : STD_LOGIC;
  SIGNAL clip_window_switch_lp_3_asn_2_itm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_if_pixel_processing_if_if_nor_itm : STD_LOGIC;
  SIGNAL pixel_processing_if_asn_itm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_if_if_1_asn_itm : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL and_itm : STD_LOGIC;
  SIGNAL asn_itm_1 : STD_LOGIC;
  SIGNAL else_io_read_in_data_vld_rsc_svs_st_2 : STD_LOGIC;
  SIGNAL system_input_output_vld_sva_dfm_st_2 : STD_LOGIC;
  SIGNAL pixel_processing_if_pixel_processing_if_if_nor_itm_2 : STD_LOGIC;
  SIGNAL main_stage_0_2 : STD_LOGIC;
  SIGNAL and_2_cse : STD_LOGIC;
  SIGNAL and_116_cse : STD_LOGIC;
  SIGNAL and_120_cse : STD_LOGIC;
  SIGNAL and_128_cse : STD_LOGIC;
  SIGNAL and_143_cse : STD_LOGIC;
  SIGNAL and_146_cse : STD_LOGIC;
  SIGNAL and_147_cse : STD_LOGIC;
  SIGNAL and_148_cse : STD_LOGIC;
  SIGNAL and_154_cse : STD_LOGIC;
  SIGNAL and_141_cse : STD_LOGIC;
  SIGNAL pixel_processing_if_if_1_pixel_processing_if_if_1_if_and_svs : STD_LOGIC;
  SIGNAL system_input_land_1_lpi_1_dfm : STD_LOGIC;
  SIGNAL median_max_8_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_9_lpi_1_dfm_1_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_window_8_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_window_6_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_0_lpi_1_dfm_1_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_1_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_window_2_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_window_0_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_4_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_8_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_3_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_5_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_9_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_4_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_6_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_7_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_5_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_6_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_qr_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_0_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_3_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_1_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_4_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL clip_window_qr_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_6_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_7_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_7_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_8_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_8_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL clip_window_qr_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_1_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_2_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_2_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_3_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL clip_window_qr_3_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL reg_system_input_system_input_output_vld_and_cse : STD_LOGIC;
  SIGNAL nand_2_cse : STD_LOGIC;
  SIGNAL mcu_data_rsci_adr_d_mx0c2 : STD_LOGIC;
  SIGNAL mcu_data_rsci_adr_d_mx0c3 : STD_LOGIC;
  SIGNAL median_max_5_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1a_if_slc_L1a_if_acc_14_3_itm : STD_LOGIC;
  SIGNAL L1a_if_slc_L1a_if_acc_13_3_itm : STD_LOGIC;
  SIGNAL L1a_if_slc_L1a_if_acc_12_3_itm : STD_LOGIC;
  SIGNAL L1b_if_slc_L1b_if_acc_12_3_itm : STD_LOGIC;
  SIGNAL L1b_if_slc_L1b_if_acc_11_3_itm : STD_LOGIC;
  SIGNAL L1a_if_slc_L1a_if_acc_4_3_itm : STD_LOGIC;
  SIGNAL L1b_asn_4_mx1w1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1b_asn_44_mx0w1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_sel_1_0_sva_dfm_mx0 : STD_LOGIC;
  SIGNAL pixel_processing_if_if_acc_2_psp_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_if_if_acc_8_psp : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_if_if_acc_6_sdt : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL median_max2_2_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL clip_window_switch_lp_equal_tmp : STD_LOGIC;
  SIGNAL clip_window_switch_lp_equal_tmp_1 : STD_LOGIC;
  SIGNAL clip_window_switch_lp_equal_tmp_2 : STD_LOGIC;
  SIGNAL clip_window_switch_lp_2_equal_tmp : STD_LOGIC;
  SIGNAL clip_window_switch_lp_2_equal_tmp_1 : STD_LOGIC;
  SIGNAL clip_window_switch_lp_2_equal_tmp_2 : STD_LOGIC;
  SIGNAL median_max2_8_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1a_asn_11_mx0w1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_7_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1a_asn_16_mx0w1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_5_3_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_4_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_7_2_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max_5_1_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL clip_window_switch_lp_1_equal_tmp : STD_LOGIC;
  SIGNAL clip_window_switch_lp_1_equal_tmp_1 : STD_LOGIC;
  SIGNAL clip_window_switch_lp_1_equal_tmp_2 : STD_LOGIC;
  SIGNAL buffer_qr_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL clip_window_switch_lp_3_equal_tmp : STD_LOGIC;
  SIGNAL clip_window_switch_lp_3_equal_tmp_1 : STD_LOGIC;
  SIGNAL clip_window_switch_lp_3_equal_tmp_2 : STD_LOGIC;
  SIGNAL median_max2_6_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL median_max2_5_lpi_1_dfm_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1b_if_acc_15_itm_3 : STD_LOGIC;
  SIGNAL L1b_if_acc_14_itm_3 : STD_LOGIC;
  SIGNAL L1b_if_acc_13_itm_3 : STD_LOGIC;
  SIGNAL and_104_rgt : STD_LOGIC;
  SIGNAL median_max_and_7_rgt : STD_LOGIC;
  SIGNAL and_108_rgt : STD_LOGIC;
  SIGNAL reg_median_median_max_or_2_cse : STD_LOGIC;
  SIGNAL reg_pixel_processing_if_pixel_processing_if_if_pixel_processing_if_if_and_cse
      : STD_LOGIC;
  SIGNAL z_out_3 : STD_LOGIC;
  SIGNAL z_out_1_3 : STD_LOGIC;
  SIGNAL z_out_2_3 : STD_LOGIC;
  SIGNAL z_out_3_3 : STD_LOGIC;
  SIGNAL z_out_4_3 : STD_LOGIC;
  SIGNAL z_out_5_3 : STD_LOGIC;
  SIGNAL z_out_6_3 : STD_LOGIC;
  SIGNAL z_out_7_3 : STD_LOGIC;
  SIGNAL z_out_8_3 : STD_LOGIC;

  SIGNAL system_input_if_2_qelse_acc_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL system_input_if_2_system_input_if_2_nand_nl : STD_LOGIC;
  SIGNAL system_input_if_1_qelse_acc_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL clip_window_switch_lp_2_not_4_nl : STD_LOGIC;
  SIGNAL system_input_else_2_acc_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL and_102_nl : STD_LOGIC;
  SIGNAL median_max2_and_5_nl : STD_LOGIC;
  SIGNAL median_max_and_3_nl : STD_LOGIC;
  SIGNAL median_max2_and_3_nl : STD_LOGIC;
  SIGNAL median_max_and_1_nl : STD_LOGIC;
  SIGNAL median_max2_median_max2_nor_nl : STD_LOGIC;
  SIGNAL buffer_nor_nl : STD_LOGIC;
  SIGNAL pixel_processing_if_if_acc_7_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL pixel_processing_if_if_acc_5_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL pixel_processing_if_if_acc_4_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL nor_nl : STD_LOGIC;
  SIGNAL clip_window_switch_lp_2_nor_nl : STD_LOGIC;
  SIGNAL clip_window_switch_lp_nor_nl : STD_LOGIC;
  SIGNAL clip_window_switch_lp_3_nor_nl : STD_LOGIC;
  SIGNAL clip_window_switch_lp_1_nor_nl : STD_LOGIC;
  SIGNAL L1b_if_acc_15_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL L1b_if_acc_14_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL L1b_if_acc_13_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL nand_6_nl : STD_LOGIC;
  SIGNAL L1a_if_acc_14_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL L1a_if_acc_13_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL L1a_if_acc_12_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL L1b_if_acc_12_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL L1b_if_acc_11_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL L1a_if_acc_4_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL mcu_data_mcu_data_or_nl : STD_LOGIC;
  SIGNAL mcu_data_and_1_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL mcu_data_mux1h_1_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL mcu_data_nor_1_nl : STD_LOGIC;
  SIGNAL mux_56_nl : STD_LOGIC;
  SIGNAL mux_55_nl : STD_LOGIC;
  SIGNAL nand_1_nl : STD_LOGIC;
  SIGNAL mcu_data_mux1h_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL pixel_processing_if_if_pixel_processing_if_if_acc_1_nl : STD_LOGIC_VECTOR
      (31 DOWNTO 0);
  SIGNAL mcu_data_nor_2_nl : STD_LOGIC;
  SIGNAL buffer_buf_mux_3_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_nor_nl : STD_LOGIC;
  SIGNAL buffer_buf_mux_2_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_nor_1_nl : STD_LOGIC;
  SIGNAL acc_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL thresholding_if_mux1h_3_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL thresholding_if_mux1h_4_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL acc_1_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL L1b_if_mux1h_3_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1b_if_mux1h_4_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL acc_2_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL L1a_if_mux1h_6_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1a_if_mux1h_7_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL clip_window_mux_2_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL acc_3_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL L1a_if_mux1h_8_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1a_if_mux1h_9_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL acc_4_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL L1a_if_mux_9_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1a_if_mux_10_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL acc_5_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL L1a_if_mux_11_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1a_if_mux_12_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL acc_6_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL L1b_if_mux_6_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1b_if_mux_7_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL acc_7_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL L1a_if_mux_13_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1a_if_mux_14_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL acc_8_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL L1b_if_mux_8_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL L1b_if_mux_9_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL in_data_rsci_d_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL in_data_rsci_z : STD_LOGIC_VECTOR (2 DOWNTO 0);

  SIGNAL in_data_vld_rsci_d_1 : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL in_data_vld_rsci_z : STD_LOGIC_VECTOR (0 DOWNTO 0);

  SIGNAL out_data_rsci_d : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL out_data_rsci_z : STD_LOGIC_VECTOR (2 DOWNTO 0);

  COMPONENT filter_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (6 DOWNTO 0);
      buffer_buf_vinit_C_1_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL filter_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL filter_core_core_fsm_inst_buffer_buf_vinit_C_1_tr0 : STD_LOGIC;

  FUNCTION MUX1HOT_v_32_4_2(input_3 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_3_3_2(input_2 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_3_4_2(input_3 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_10_2_2(input_0 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(9 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(9 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_32_2_2(input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_3_2_2(input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  -- Default Constant Signal Assignments

  in_data_rsci : mgc_hls.mgc_ioport_comps_v11.mgc_in_wire_en_v1
    GENERIC MAP(
      rscid => 1,
      width => 3
      )
    PORT MAP(
      ld => in_data_rsci_ld,
      d => in_data_rsci_d_1,
      lz => in_data_rsc_lz,
      z => in_data_rsci_z
    );
  in_data_rsci_d <= in_data_rsci_d_1;
  in_data_rsci_z <= in_data_rsc_z;

  in_data_vld_rsci : mgc_hls.mgc_ioport_comps_v11.mgc_in_wire_v1
    GENERIC MAP(
      rscid => 2,
      width => 1
      )
    PORT MAP(
      d => in_data_vld_rsci_d_1,
      z => in_data_vld_rsci_z
    );
  in_data_vld_rsci_d <= in_data_vld_rsci_d_1(0);
  in_data_vld_rsci_z(0) <= in_data_vld_rsc_z;

  out_data_rsci : mgc_hls.mgc_ioport_comps_v11.mgc_out_stdreg_en_v1
    GENERIC MAP(
      rscid => 3,
      width => 3
      )
    PORT MAP(
      ld => out_data_rsci_ld,
      d => out_data_rsci_d,
      lz => out_data_rsc_lz,
      z => out_data_rsci_z
    );
  out_data_rsci_d <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(out_data_rsci_d_0,
      1),3));
  out_data_rsc_z <= out_data_rsci_z;

  filter_core_core_fsm_inst : filter_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => filter_core_core_fsm_inst_fsm_output,
      buffer_buf_vinit_C_1_tr0 => filter_core_core_fsm_inst_buffer_buf_vinit_C_1_tr0
    );
  fsm_output <= filter_core_core_fsm_inst_fsm_output;
  filter_core_core_fsm_inst_buffer_buf_vinit_C_1_tr0 <= NOT buffer_buf_buffer_buf_nor_itm_1;

  reg_system_input_system_input_output_vld_and_cse <= in_data_vld_rsci_d AND mcu_ready_sva
      AND (fsm_output(3));
  reg_pixel_processing_if_pixel_processing_if_if_pixel_processing_if_if_and_cse <=
      mcu_ready_sva AND (NOT or_tmp_56);
  and_104_rgt <= mcu_ready_sva AND (NOT L1b_if_acc_15_itm_3) AND (fsm_output(5));
  median_max_and_7_rgt <= mcu_ready_sva AND (NOT L1b_if_acc_14_itm_3) AND (fsm_output(5));
  reg_median_median_max_or_2_cse <= (mcu_ready_sva AND L1b_if_acc_14_itm_3 AND (fsm_output(5)))
      OR median_max_and_7_rgt;
  and_108_rgt <= mcu_ready_sva AND (NOT L1b_if_acc_13_itm_3) AND (fsm_output(5));
  L1b_asn_4_mx1w1 <= MUX_v_3_2_2(median_max_7_2_lpi_1_dfm_mx0, L1a_asn_11_mx0w1,
      L1a_if_slc_L1a_if_acc_14_3_itm);
  median_max_5_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_6_lpi_1_dfm_mx0, median_max2_5_lpi_1_dfm_mx0,
      z_out_1_3);
  system_input_system_input_or_tmp <= system_input_output_vld_sva OR (TO_STDLOGIC(system_input_c_sva=STD_LOGIC_VECTOR'("00000000000000000000000000000001"))
      AND TO_STDLOGIC(system_input_r_sva=STD_LOGIC_VECTOR'("00000000000000000000000000000001")));
  clip_window_clip_window_and_tmp <= TO_STDLOGIC(system_input_r_filter_sva=STD_LOGIC_VECTOR'("00000000000000000000000011101111"));
  pixel_processing_if_if_1_pixel_processing_if_if_1_if_and_svs <= (pixel_processing_frame_sva(0))
      AND TO_STDLOGIC(pixel_processing_if_if_acc_tmp=STD_LOGIC_VECTOR'("000"));
  system_input_land_1_lpi_1_dfm <= clip_window_clip_window_and_1_tmp AND clip_window_clip_window_and_tmp;
  L1b_asn_44_mx0w1 <= MUX_v_3_2_2(median_max2_0_lpi_1_dfm_mx0, median_max_1_1_lpi_1_dfm_mx0,
      z_out_7_3);
  clip_window_clip_window_nor_tmp <= NOT(TO_STDLOGIC(system_input_r_filter_sva/=STD_LOGIC_VECTOR'("00000000000000000000000000000000")));
  clip_window_clip_window_and_1_tmp <= TO_STDLOGIC(system_input_c_filter_sva=STD_LOGIC_VECTOR'("00000000000000000000000100111111"));
  buffer_nor_nl <= NOT(TO_STDLOGIC(system_input_c_sva/=STD_LOGIC_VECTOR'("00000000000000000000000000000000")));
  buffer_sel_1_0_sva_dfm_mx0 <= MUX_s_1_2_2(buffer_sel_1_0_sva_1, (NOT buffer_sel_1_0_sva_1),
      buffer_nor_nl);
  pixel_processing_if_if_acc_tmp <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(pixel_processing_if_if_acc_2_psp_sva(2),
      1), 1), 3) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(pixel_processing_if_if_acc_2_psp_sva(1
      DOWNTO 0)), 2), 3), 3));
  pixel_processing_if_if_acc_7_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(NOT
      (pixel_processing_if_if_acc_8_psp(2)), 1), 1), 2) + CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(NOT
      (pixel_processing_if_if_acc_8_psp(1)), 1), 1), 2), 2));
  pixel_processing_if_if_acc_2_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED(pixel_processing_if_if_acc_7_nl),
      3) + UNSIGNED'( (pixel_processing_if_if_acc_8_psp(2)) & (pixel_processing_if_if_acc_8_psp(0))
      & (pixel_processing_if_if_acc_6_sdt(0))), 3));
  pixel_processing_if_if_acc_8_psp <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(pixel_processing_if_if_acc_6_sdt(3
      DOWNTO 1)) + UNSIGNED'( "101"), 3));
  pixel_processing_if_if_acc_5_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(pixel_processing_frame_sva(2
      DOWNTO 1)), 2), 3) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (pixel_processing_frame_sva(4
      DOWNTO 3))), 2), 3), 3));
  pixel_processing_if_if_acc_4_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(pixel_processing_frame_sva(6
      DOWNTO 5)), 2), 3) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT (pixel_processing_frame_sva(8
      DOWNTO 7))), 2), 3), 3));
  pixel_processing_if_if_acc_6_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(pixel_processing_if_if_acc_5_nl),
      4) + CONV_UNSIGNED(UNSIGNED(pixel_processing_if_if_acc_4_nl), 4), 4));
  median_max2_0_lpi_1_dfm_1_mx0 <= MUX_v_3_2_2(median_max_1_1_lpi_1_dfm_mx0, median_max2_0_lpi_1_dfm_mx0,
      z_out_7_3);
  median_max_1_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_2_2_lpi_1_dfm_mx0, L1b_asn_44_mx0w1,
      z_out_1_3);
  median_max2_2_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max_3_1_lpi_1_dfm_mx0, median_max_2_1_lpi_1_dfm_mx0,
      z_out_5_3);
  median_max_2_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_1_1_lpi_1_dfm_mx0, median_max2_2_1_lpi_1_dfm_mx0,
      z_out_8_3);
  median_max_3_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_4_1_lpi_1_dfm_mx0, median_max2_3_1_lpi_1_dfm_mx0,
      z_out_6_3);
  median_max2_0_lpi_1_dfm_mx0 <= MUX_v_3_2_2(clip_window_qr_lpi_1_dfm_mx0, pixel_processing_window_0_lpi_1_dfm,
      z_out_3_3);
  median_max_1_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_2_1_lpi_1_dfm_mx0, median_max2_1_1_lpi_1_dfm_mx0,
      z_out_8_3);
  median_max2_3_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(pixel_processing_window_2_lpi_1_dfm,
      clip_window_qr_3_lpi_1_dfm_mx0, z_out_4_3);
  nor_nl <= NOT(clip_window_clip_window_and_tmp OR z_out_2_3);
  median_max2_4_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(system_input_window_7_sva, system_input_window_8_sva,
      nor_nl);
  median_max2_1_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(pixel_processing_window_0_lpi_1_dfm,
      clip_window_qr_lpi_1_dfm_mx0, z_out_3_3);
  median_max2_2_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(clip_window_qr_3_lpi_1_dfm_mx0, pixel_processing_window_2_lpi_1_dfm,
      z_out_4_3);
  clip_window_switch_lp_2_nor_nl <= NOT(clip_window_switch_lp_2_equal_tmp OR clip_window_switch_lp_2_equal_tmp_1
      OR clip_window_switch_lp_2_equal_tmp_2);
  pixel_processing_window_2_lpi_1_dfm <= MUX1HOT_v_3_4_2(system_input_window_7_sva,
      system_input_window_4_sva, system_input_window_8_sva, system_input_window_5_sva,
      STD_LOGIC_VECTOR'( clip_window_switch_lp_2_nor_nl & clip_window_switch_lp_2_equal_tmp
      & clip_window_switch_lp_2_equal_tmp_1 & clip_window_switch_lp_2_equal_tmp_2));
  clip_window_qr_3_lpi_1_dfm_mx0 <= MUX_v_3_2_2(system_input_window_6_sva, system_input_window_7_sva,
      clip_window_clip_window_nor_tmp);
  clip_window_switch_lp_nor_nl <= NOT(clip_window_switch_lp_equal_tmp OR clip_window_switch_lp_equal_tmp_1
      OR clip_window_switch_lp_equal_tmp_2);
  pixel_processing_window_0_lpi_1_dfm <= MUX1HOT_v_3_4_2(system_input_window_7_sva,
      system_input_window_4_sva, system_input_window_6_sva, system_input_window_3_sva,
      STD_LOGIC_VECTOR'( clip_window_switch_lp_nor_nl & clip_window_switch_lp_equal_tmp
      & clip_window_switch_lp_equal_tmp_1 & clip_window_switch_lp_equal_tmp_2));
  clip_window_qr_lpi_1_dfm_mx0 <= MUX_v_3_2_2(system_input_window_4_sva, system_input_window_7_sva,
      clip_window_clip_window_nor_1_tmp);
  clip_window_clip_window_nor_1_tmp <= NOT(TO_STDLOGIC(system_input_c_filter_sva/=STD_LOGIC_VECTOR'("00000000000000000000000000000000")));
  clip_window_switch_lp_equal_tmp <= clip_window_clip_window_nor_tmp AND (NOT clip_window_clip_window_nor_1_tmp);
  clip_window_switch_lp_equal_tmp_1 <= clip_window_clip_window_nor_1_tmp AND (NOT
      clip_window_clip_window_nor_tmp);
  clip_window_switch_lp_equal_tmp_2 <= NOT(clip_window_clip_window_nor_1_tmp OR clip_window_clip_window_nor_tmp);
  clip_window_switch_lp_2_equal_tmp <= clip_window_clip_window_and_tmp AND (NOT clip_window_clip_window_nor_1_tmp);
  clip_window_switch_lp_2_equal_tmp_1 <= clip_window_clip_window_nor_1_tmp AND (NOT
      clip_window_clip_window_and_tmp);
  clip_window_switch_lp_2_equal_tmp_2 <= NOT(clip_window_clip_window_nor_1_tmp OR
      clip_window_clip_window_and_tmp);
  system_input_system_input_nand_tmp <= NOT(TO_STDLOGIC(system_input_c_sva=STD_LOGIC_VECTOR'("00000000000000000000000100111111")));
  and_2_tmp <= in_data_vld_rsci_d AND mcu_ready_sva;
  if_if_if_and_tmp <= TO_STDLOGIC(mcu_data_rsci_q_d=STD_LOGIC_VECTOR'("00000000000000000000000000000001"));
  median_max2_8_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_9_lpi_1_dfm_1_mx0, median_max_8_lpi_1_dfm_mx0,
      z_out_3);
  L1a_asn_11_mx0w1 <= MUX_v_3_2_2(median_max_4_lpi_1_dfm_mx0, median_max2_6_2_lpi_1_dfm_mx0,
      L1b_if_slc_L1b_if_acc_11_3_itm);
  median_max2_7_lpi_1_dfm_mx0 <= MUX_v_3_2_2(L1a_asn_11_mx0w1, median_max_7_2_lpi_1_dfm_mx0,
      L1a_if_slc_L1a_if_acc_14_3_itm);
  L1a_asn_16_mx0w1 <= MUX_v_3_2_2(median_max_2_2_lpi_1_dfm, median_max_3_lpi_1_dfm_mx0,
      z_out_7_3);
  median_max2_5_3_lpi_1_dfm_mx0 <= MUX_v_3_2_2(L1a_asn_16_mx0w1, median_max_5_1_lpi_1_dfm_mx0,
      L1a_if_slc_L1a_if_acc_13_3_itm);
  median_max_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_1_lpi_1_dfm, median_max2_2_lpi_1_dfm_mx0,
      z_out_1_3);
  median_max2_4_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max_5_1_lpi_1_dfm_mx0, L1a_asn_16_mx0w1,
      L1a_if_slc_L1a_if_acc_13_3_itm);
  median_max2_9_lpi_1_dfm_1_mx0 <= MUX_v_3_2_2(median_max_8_1_lpi_1_dfm_mx0, median_max2_9_lpi_1_dfm_mx0,
      L1a_if_slc_L1a_if_acc_12_3_itm);
  median_max_8_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_7_2_lpi_1_dfm_mx0, median_max2_8_2_lpi_1_dfm_mx0,
      L1b_if_slc_L1b_if_acc_12_3_itm);
  median_max_7_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_8_2_lpi_1_dfm_mx0, median_max2_7_2_lpi_1_dfm_mx0,
      L1b_if_slc_L1b_if_acc_12_3_itm);
  median_max_5_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_6_2_lpi_1_dfm_mx0, median_max_4_lpi_1_dfm_mx0,
      L1b_if_slc_L1b_if_acc_11_3_itm);
  median_max2_8_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_9_lpi_1_dfm_mx0, median_max_8_1_lpi_1_dfm_mx0,
      L1a_if_slc_L1a_if_acc_12_3_itm);
  median_max2_7_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_5_2_lpi_1_dfm_mx0, median_max_7_1_lpi_1_dfm_mx0,
      z_out_5_3);
  median_max_4_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_3_2_lpi_1_dfm, median_max2_4_2_lpi_1_dfm_mx0,
      z_out_6_3);
  median_max2_6_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max_7_1_lpi_1_dfm_mx0, median_max2_5_2_lpi_1_dfm_mx0,
      z_out_5_3);
  median_max2_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max_3_lpi_1_dfm_mx0, median_max_2_2_lpi_1_dfm,
      z_out_7_3);
  median_max2_9_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_7_1_lpi_1_dfm_mx0, pixel_processing_window_8_lpi_1_dfm,
      z_out_2_3);
  median_max_8_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max_6_2_lpi_1_dfm_mx0, median_max2_8_1_lpi_1_dfm_mx0,
      z_out_8_3);
  median_max2_5_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max_4_2_lpi_1_dfm, median_max_5_2_lpi_1_dfm_mx0,
      z_out_3_3);
  median_max_7_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_8_1_lpi_1_dfm_mx0, median_max_6_2_lpi_1_dfm_mx0,
      z_out_8_3);
  median_max_3_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_4_2_lpi_1_dfm_mx0, median_max2_3_2_lpi_1_dfm,
      z_out_6_3);
  median_max_6_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_5_1_lpi_1_dfm, median_max2_6_1_lpi_1_dfm_mx0,
      z_out_4_3);
  median_max2_8_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(pixel_processing_window_8_lpi_1_dfm,
      median_max2_7_1_lpi_1_dfm_mx0, z_out_2_3);
  median_max2_4_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max_5_2_lpi_1_dfm_mx0, median_max_4_2_lpi_1_dfm,
      z_out_3_3);
  clip_window_switch_lp_3_nor_nl <= NOT(clip_window_switch_lp_3_equal_tmp OR clip_window_switch_lp_3_equal_tmp_1
      OR clip_window_switch_lp_3_equal_tmp_2);
  pixel_processing_window_8_lpi_1_dfm <= MUX1HOT_v_3_4_2(system_input_window_7_sva,
      buffer_qr_1_lpi_1_dfm_mx0, clip_window_switch_lp_3_asn_2_itm, system_input_din_sva_1,
      STD_LOGIC_VECTOR'( clip_window_switch_lp_3_nor_nl & clip_window_switch_lp_3_equal_tmp
      & clip_window_switch_lp_3_equal_tmp_1 & clip_window_switch_lp_3_equal_tmp_2));
  median_max2_7_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(pixel_processing_window_6_lpi_1_dfm,
      clip_window_qr_2_lpi_1_dfm_mx0, L1a_if_slc_L1a_if_acc_4_3_itm);
  median_max_5_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max2_6_1_lpi_1_dfm_mx0, median_max2_5_1_lpi_1_dfm,
      z_out_4_3);
  median_max2_6_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(clip_window_qr_2_lpi_1_dfm_mx0, pixel_processing_window_6_lpi_1_dfm,
      L1a_if_slc_L1a_if_acc_4_3_itm);
  clip_window_switch_lp_1_nor_nl <= NOT(clip_window_switch_lp_1_equal_tmp OR clip_window_switch_lp_1_equal_tmp_1
      OR clip_window_switch_lp_1_equal_tmp_2);
  pixel_processing_window_6_lpi_1_dfm <= MUX1HOT_v_3_4_2(system_input_window_7_sva,
      buffer_qr_1_lpi_1_dfm_mx0, system_input_window_6_sva, buffer_qr_lpi_1_dfm_mx0,
      STD_LOGIC_VECTOR'( clip_window_switch_lp_1_nor_nl & clip_window_switch_lp_1_equal_tmp
      & clip_window_switch_lp_1_equal_tmp_1 & clip_window_switch_lp_1_equal_tmp_2));
  clip_window_qr_2_lpi_1_dfm_mx0 <= MUX_v_3_2_2(buffer_qr_1_lpi_1_dfm_mx0, system_input_window_7_sva,
      clip_window_last_col_0_sva_3);
  buffer_qr_1_lpi_1_dfm_mx0 <= MUX_v_3_2_2(buffer_buf_rsci_q_d, buffer_t0_sva_1,
      buffer_sel_1_0_sva_dfm);
  clip_window_switch_lp_1_equal_tmp <= clip_window_first_row_0_sva_5 AND (NOT clip_window_last_col_0_sva_3);
  clip_window_switch_lp_1_equal_tmp_1 <= clip_window_last_col_0_sva_3 AND (NOT clip_window_first_row_0_sva_5);
  clip_window_switch_lp_1_equal_tmp_2 <= NOT(clip_window_last_col_0_sva_3 OR clip_window_first_row_0_sva_5);
  buffer_qr_lpi_1_dfm_mx0 <= MUX_v_3_2_2(buffer_t0_sva_1, buffer_buf_rsci_q_d, buffer_sel_1_0_sva_dfm);
  clip_window_switch_lp_3_equal_tmp <= clip_window_last_row_0_sva_7 AND (NOT clip_window_last_col_0_sva_3);
  clip_window_switch_lp_3_equal_tmp_1 <= clip_window_last_col_0_sva_3 AND (NOT clip_window_last_row_0_sva_7);
  clip_window_switch_lp_3_equal_tmp_2 <= NOT(clip_window_last_col_0_sva_3 OR clip_window_last_row_0_sva_7);
  median_max2_6_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max_7_lpi_1_dfm, median_max_6_lpi_1_dfm,
      z_out_2_3);
  median_max2_5_lpi_1_dfm_mx0 <= MUX_v_3_2_2(median_max_4_1_lpi_1_dfm, median_max_5_3_lpi_1_dfm,
      z_out_3_3);
  L1b_if_acc_15_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & median_max2_7_lpi_1_dfm_mx0)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT median_max2_8_lpi_1_dfm_mx0), 3),
      4) + UNSIGNED'( "0001"), 4));
  L1b_if_acc_15_itm_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(L1b_if_acc_15_nl),
      4)), 3);
  L1b_if_acc_14_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & median_max2_5_3_lpi_1_dfm_mx0)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT L1b_asn_4_mx1w1), 3), 4) + UNSIGNED'(
      "0001"), 4));
  L1b_if_acc_14_itm_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(L1b_if_acc_14_nl),
      4)), 3);
  L1b_if_acc_13_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & median_max_2_lpi_1_dfm_mx0)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT median_max2_4_lpi_1_dfm_mx0), 3),
      4) + UNSIGNED'( "0001"), 4));
  L1b_if_acc_13_itm_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(L1b_if_acc_13_nl),
      4)), 3);
  or_dcpl <= NOT(mcu_ready_sva AND in_data_vld_rsci_d);
  and_dcpl_11 <= else_io_read_in_data_vld_rsc_svs AND system_input_output_vld_sva_dfm;
  and_dcpl_33 <= mcu_ready_sva AND else_io_read_in_data_vld_rsc_svs;
  and_dcpl_44 <= asn_itm AND else_io_read_in_data_vld_rsc_svs;
  and_dcpl_45 <= and_dcpl_44 AND system_input_output_vld_sva_dfm;
  and_dcpl_57 <= system_input_land_1_lpi_1_dfm_1 AND pixel_processing_if_if_1_pixel_processing_if_if_1_if_and_svs_1;
  nor_tmp_4 <= system_input_land_1_lpi_1_dfm_1 AND system_input_output_vld_sva_dfm
      AND else_io_read_in_data_vld_rsc_svs AND mcu_ready_sva;
  nand_6_nl <= NOT((NOT(system_input_land_1_lpi_1_dfm_1 AND system_input_output_vld_sva_dfm
      AND else_io_read_in_data_vld_rsc_svs)) AND mcu_ready_sva);
  mux_tmp_3 <= MUX_s_1_2_2(nor_tmp_4, nand_6_nl, if_if_if_and_tmp);
  and_dcpl_64 <= (NOT asn_itm) AND if_if_if_and_mdf_sva_2;
  L1a_if_acc_14_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1a_asn_11_mx0w1)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT median_max_7_2_lpi_1_dfm_mx0), 3),
      4) + UNSIGNED'( "0001"), 4));
  L1a_if_slc_L1a_if_acc_14_3_itm <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(L1a_if_acc_14_nl),
      4)), 3);
  L1a_if_acc_13_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1a_asn_16_mx0w1)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT median_max_5_1_lpi_1_dfm_mx0), 3),
      4) + UNSIGNED'( "0001"), 4));
  L1a_if_slc_L1a_if_acc_13_3_itm <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(L1a_if_acc_13_nl),
      4)), 3);
  L1a_if_acc_12_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & median_max_8_1_lpi_1_dfm_mx0)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT median_max2_9_lpi_1_dfm_mx0), 3),
      4) + UNSIGNED'( "0001"), 4));
  L1a_if_slc_L1a_if_acc_12_3_itm <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(L1a_if_acc_12_nl),
      4)), 3);
  L1b_if_acc_12_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & median_max2_7_2_lpi_1_dfm_mx0)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT median_max2_8_2_lpi_1_dfm_mx0),
      3), 4) + UNSIGNED'( "0001"), 4));
  L1b_if_slc_L1b_if_acc_12_3_itm <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(L1b_if_acc_12_nl),
      4)), 3);
  L1b_if_acc_11_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & median_max_4_lpi_1_dfm_mx0)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT median_max2_6_2_lpi_1_dfm_mx0),
      3), 4) + UNSIGNED'( "0001"), 4));
  L1b_if_slc_L1b_if_acc_11_3_itm <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(L1b_if_acc_11_nl),
      4)), 3);
  L1a_if_acc_4_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & pixel_processing_window_6_lpi_1_dfm)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT clip_window_qr_2_lpi_1_dfm_mx0),
      3), 4) + UNSIGNED'( "0001"), 4));
  L1a_if_slc_L1a_if_acc_4_3_itm <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(L1a_if_acc_4_nl),
      4)), 3);
  and_116_cse <= and_2_tmp AND (fsm_output(3));
  and_120_cse <= and_dcpl_33 AND (fsm_output(4));
  and_128_cse <= (NOT(mcu_ready_sva AND else_io_read_in_data_vld_rsc_svs)) AND (fsm_output(4));
  and_141_cse <= and_dcpl_44 AND system_input_output_vld_sva_dfm AND pixel_processing_if_pixel_processing_if_if_nor_itm
      AND (fsm_output(6));
  and_143_cse <= pixel_processing_if_pixel_processing_if_if_nor_itm_2 AND system_input_output_vld_sva_dfm_st_2
      AND else_io_read_in_data_vld_rsc_svs_st_2 AND asn_itm_1 AND main_stage_0_2
      AND (fsm_output(3));
  and_146_cse <= and_dcpl_64 AND (fsm_output(6));
  and_147_cse <= ((NOT(pixel_processing_if_pixel_processing_if_if_nor_itm_2 AND system_input_output_vld_sva_dfm_st_2
      AND else_io_read_in_data_vld_rsc_svs_st_2)) OR (NOT(asn_itm_1 AND main_stage_0_2)))
      AND (fsm_output(3));
  and_148_cse <= (NOT mux_tmp_3) AND (fsm_output(5));
  and_154_cse <= (NOT mcu_ready_sva) AND if_if_if_and_tmp AND (fsm_output(5));
  or_tmp_33 <= nor_tmp_4 AND (fsm_output(5));
  or_tmp_42 <= and_2_cse AND (fsm_output(5));
  or_tmp_48 <= or_dcpl OR (NOT (fsm_output(3)));
  or_tmp_56 <= TO_STDLOGIC(fsm_output(5 DOWNTO 4)/=STD_LOGIC_VECTOR'("00"));
  mcu_data_rsci_adr_d_mx0c2 <= and_154_cse OR ((NOT mcu_ready_sva) AND (fsm_output(4)));
  mcu_data_rsci_adr_d_mx0c3 <= and_146_cse OR (and_dcpl_33 AND system_input_output_vld_sva_dfm
      AND and_dcpl_57 AND (fsm_output(4)));
  nand_2_cse <= NOT(system_input_output_vld_sva_dfm AND else_io_read_in_data_vld_rsc_svs);
  mcu_data_mcu_data_or_nl <= mcu_data_rsci_adr_d_mx0c2 OR mcu_data_rsci_adr_d_mx0c3
      OR or_tmp_33;
  mcu_data_mux1h_1_nl <= MUX1HOT_v_3_4_2(median_max_5_lpi_1_dfm_5, STD_LOGIC_VECTOR'(
      "001"), STD_LOGIC_VECTOR'( "010"), median_max_5_lpi_1_dfm_mx0, STD_LOGIC_VECTOR'(
      and_143_cse & mcu_data_rsci_adr_d_mx0c3 & or_tmp_33 & and_141_cse));
  nand_1_nl <= NOT(nand_2_cse AND asn_itm);
  mux_55_nl <= MUX_s_1_2_2(and_dcpl_45, nand_1_nl, if_if_if_and_mdf_sva_2);
  mux_56_nl <= MUX_s_1_2_2(and_dcpl_64, mux_55_nl, pixel_processing_if_pixel_processing_if_if_nor_itm);
  mcu_data_nor_1_nl <= NOT(and_147_cse OR and_148_cse OR TO_STDLOGIC(fsm_output(2
      DOWNTO 0)/=STD_LOGIC_VECTOR'("000")) OR ((NOT mux_56_nl) AND (fsm_output(6)))
      OR ((nand_2_cse OR (NOT(system_input_land_1_lpi_1_dfm_1 AND pixel_processing_if_if_1_pixel_processing_if_if_1_if_and_svs_1)))
      AND mcu_ready_sva AND (fsm_output(4))) OR mcu_data_rsci_adr_d_mx0c2);
  mcu_data_and_1_nl <= MUX_v_3_2_2(STD_LOGIC_VECTOR'("000"), mcu_data_mux1h_1_nl,
      mcu_data_nor_1_nl);
  mcu_data_rsci_adr_d <= STD_LOGIC_VECTOR'( "00000") & mcu_data_mcu_data_or_nl &
      mcu_data_and_1_nl;
  pixel_processing_if_if_pixel_processing_if_if_acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(mcu_data_rsci_q_d)
      + UNSIGNED'( "00000000000000000000000000000001"), 32));
  mcu_data_mux1h_nl <= MUX1HOT_v_32_4_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(pixel_processing_if_if_pixel_processing_if_if_acc_1_nl),
      32)), STD_LOGIC_VECTOR'( "00000000000000000000000000000010"), (STD_LOGIC_VECTOR'(
      "00000000000000000000000") & pixel_processing_if_if_1_asn_itm), STD_LOGIC_VECTOR'(
      "00000000000000000000000000000100"), STD_LOGIC_VECTOR'( and_143_cse & and_154_cse
      & or_tmp_33 & and_146_cse));
  mcu_data_nor_2_nl <= NOT(and_147_cse OR and_148_cse OR (NOT((fsm_output(6)) OR
      (fsm_output(3)) OR (fsm_output(5)))) OR ((asn_itm OR (NOT if_if_if_and_mdf_sva_2))
      AND (fsm_output(6))));
  mcu_data_rsci_d_d <= MUX_v_32_2_2(STD_LOGIC_VECTOR'("00000000000000000000000000000000"),
      mcu_data_mux1h_nl, mcu_data_nor_2_nl);
  mcu_data_rsci_we_d <= and_143_cse OR (mux_tmp_3 AND (fsm_output(5))) OR and_146_cse;
  mcu_data_rsci_ram_rw_A_internal_RMASK_B_d <= and_141_cse OR ((NOT((NOT(and_dcpl_11
      AND and_dcpl_57)) AND mcu_ready_sva)) AND (fsm_output(4)));
  buffer_buf_mux_3_nl <= MUX_v_10_2_2((system_input_c_sva(9 DOWNTO 0)), (buffer_acc_1_itm_2
      & buffer_slc_buffer_c_5_0_1_itm_2), and_120_cse);
  buffer_buf_nor_nl <= NOT((or_dcpl AND (fsm_output(3))) OR (NOT(TO_STDLOGIC(fsm_output(4
      DOWNTO 3)/=STD_LOGIC_VECTOR'("00")))) OR and_128_cse);
  buffer_buf_rsci_radr_d <= MUX_v_10_2_2(STD_LOGIC_VECTOR'("0000000000"), buffer_buf_mux_3_nl,
      buffer_buf_nor_nl);
  buffer_buf_mux_2_nl <= MUX_v_10_2_2(buffer_buf_vinit_ndx_sva, (buffer_acc_3_itm_2
      & buffer_slc_buffer_c_5_0_1_itm_2), and_120_cse);
  buffer_buf_nor_1_nl <= NOT((NOT((fsm_output(1)) OR (fsm_output(4)))) OR and_128_cse);
  buffer_buf_rsci_wadr_d <= MUX_v_10_2_2(STD_LOGIC_VECTOR'("0000000000"), buffer_buf_mux_2_nl,
      buffer_buf_nor_1_nl);
  buffer_buf_rsci_d_d <= MUX_v_3_2_2(STD_LOGIC_VECTOR'("000"), in_data_rsci_d, and_120_cse);
  buffer_buf_rsci_we_d <= (fsm_output(1)) OR and_120_cse;
  buffer_buf_rsci_re_d <= and_116_cse OR and_120_cse;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_data_rsci_d_0 <= '0';
      ELSIF ( ((fsm_output(6)) AND asn_itm AND else_io_read_in_data_vld_rsc_svs AND
          system_input_output_vld_sva_dfm) = '1' ) THEN
        out_data_rsci_d_0 <= NOT z_out_3;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_data_rsci_ld <= '0';
        in_data_rsci_ld <= '0';
        buffer_buf_buffer_buf_nor_itm_1 <= '0';
        buffer_buf_acc_itm_2 <= STD_LOGIC_VECTOR'( "0000000000");
        median_max_5_lpi_1_dfm_5 <= STD_LOGIC_VECTOR'( "000");
        pixel_processing_if_pixel_processing_if_if_nor_itm_2 <= '0';
        system_input_output_vld_sva_dfm_st_2 <= '0';
        else_io_read_in_data_vld_rsc_svs_st_2 <= '0';
        asn_itm_1 <= '0';
        main_stage_0_2 <= '0';
        buffer_slc_buffer_c_5_0_1_itm_2 <= STD_LOGIC_VECTOR'( "000000");
        buffer_acc_3_itm_2 <= STD_LOGIC_VECTOR'( "0000");
        buffer_acc_1_itm_2 <= STD_LOGIC_VECTOR'( "0000");
        else_io_read_in_data_vld_rsc_svs <= '0';
        clip_window_switch_lp_3_asn_2_itm <= STD_LOGIC_VECTOR'( "000");
        system_input_din_sva_1 <= STD_LOGIC_VECTOR'( "000");
        buffer_t0_sva_1 <= STD_LOGIC_VECTOR'( "000");
        if_if_if_and_mdf_sva_2 <= '0';
      ELSE
        out_data_rsci_ld <= and_dcpl_45 AND (fsm_output(6));
        in_data_rsci_ld <= and_116_cse;
        buffer_buf_buffer_buf_nor_itm_1 <= NOT(TO_STDLOGIC(buffer_buf_vinit_ndx_sva/=STD_LOGIC_VECTOR'("0000000000")));
        buffer_buf_acc_itm_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(buffer_buf_vinit_ndx_sva)
            + UNSIGNED'( "1111111111"), 10));
        median_max_5_lpi_1_dfm_5 <= MUX_v_3_2_2(median_max2_5_lpi_1_dfm_mx0, median_max2_6_lpi_1_dfm_mx0,
            and_102_nl);
        pixel_processing_if_pixel_processing_if_if_nor_itm_2 <= pixel_processing_if_pixel_processing_if_if_nor_itm;
        system_input_output_vld_sva_dfm_st_2 <= system_input_output_vld_sva_dfm_st_1;
        else_io_read_in_data_vld_rsc_svs_st_2 <= else_io_read_in_data_vld_rsc_svs_st_1;
        asn_itm_1 <= asn_itm;
        main_stage_0_2 <= NOT (fsm_output(2));
        buffer_slc_buffer_c_5_0_1_itm_2 <= system_input_c_sva(5 DOWNTO 0);
        buffer_acc_3_itm_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED'(
            buffer_sel_1_0_sva_dfm_mx0 & '0' & buffer_sel_1_0_sva_dfm_mx0), 3), 4)
            + UNSIGNED(system_input_c_sva(9 DOWNTO 6)), 4));
        buffer_acc_1_itm_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(system_input_c_sva(9
            DOWNTO 6)) + UNSIGNED'( "0101"), 4));
        else_io_read_in_data_vld_rsc_svs <= MUX_s_1_2_2(in_data_vld_rsci_d, else_io_read_in_data_vld_rsc_svs,
            or_tmp_56);
        clip_window_switch_lp_3_asn_2_itm <= system_input_window_8_sva;
        system_input_din_sva_1 <= in_data_rsci_d;
        buffer_t0_sva_1 <= buffer_buf_rsci_q_d;
        if_if_if_and_mdf_sva_2 <= if_if_if_and_tmp;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        buffer_buf_vinit_ndx_sva <= STD_LOGIC_VECTOR'( "1001111111");
      ELSIF ( (fsm_output(2)) = '1' ) THEN
        buffer_buf_vinit_ndx_sva <= buffer_buf_acc_itm_2;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_window_6_sva <= STD_LOGIC_VECTOR'( "000");
        system_input_window_7_sva <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( or_tmp_42 = '1' ) THEN
        system_input_window_6_sva <= buffer_qr_lpi_1_dfm_mx0;
        system_input_window_7_sva <= buffer_qr_1_lpi_1_dfm_mx0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_window_8_sva <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( (and_2_cse AND (fsm_output(4))) = '1' ) THEN
        system_input_window_8_sva <= in_data_rsci_d;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pixel_processing_threshold_sva <= STD_LOGIC_VECTOR'( "100");
      ELSIF ( (and_itm AND (fsm_output(5))) = '1' ) THEN
        pixel_processing_threshold_sva <= mcu_data_rsci_q_d(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_r_sva <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");
      ELSIF ( (NOT(or_dcpl OR system_input_system_input_nand_tmp OR (NOT (fsm_output(3)))))
          = '1' ) THEN
        system_input_r_sva <= MUX_v_32_2_2(STD_LOGIC_VECTOR'("00000000000000000000000000000000"),
            STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(system_input_if_2_qelse_acc_nl),
            32)), system_input_if_2_system_input_if_2_nand_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pixel_processing_frame_sva <= STD_LOGIC_VECTOR'( "000000001");
      ELSIF ( ((NOT or_dcpl) AND system_input_system_input_or_tmp AND clip_window_clip_window_and_1_tmp
          AND clip_window_clip_window_and_tmp AND (fsm_output(3))) = '1' ) THEN
        pixel_processing_frame_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(pixel_processing_frame_sva)
            + UNSIGNED'( "000000001"), 9));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_window_4_sva <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( or_tmp_48 = '0' ) THEN
        system_input_window_4_sva <= system_input_window_7_sva;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_window_3_sva <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( or_tmp_48 = '0' ) THEN
        system_input_window_3_sva <= system_input_window_6_sva;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_window_5_sva <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( or_tmp_48 = '0' ) THEN
        system_input_window_5_sva <= system_input_window_8_sva;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_r_filter_sva <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");
      ELSIF ( (NOT(or_dcpl OR (NOT(system_input_system_input_or_tmp AND clip_window_clip_window_and_1_tmp))
          OR (NOT (fsm_output(3))))) = '1' ) THEN
        system_input_r_filter_sva <= MUX_v_32_2_2(STD_LOGIC_VECTOR'("00000000000000000000000000000000"),
            STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(system_input_if_1_qelse_acc_nl),
            32)), clip_window_switch_lp_2_not_4_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_c_filter_sva <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");
      ELSIF ( or_tmp_48 = '0' ) THEN
        system_input_c_filter_sva <= system_input_c_sva;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_c_sva <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");
      ELSIF ( or_tmp_48 = '0' ) THEN
        system_input_c_sva <= MUX_v_32_2_2(STD_LOGIC_VECTOR'("00000000000000000000000000000000"),
            STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(system_input_else_2_acc_nl), 32)),
            system_input_system_input_nand_tmp);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_output_vld_sva <= '0';
      ELSIF ( reg_system_input_system_input_output_vld_and_cse = '1' ) THEN
        system_input_output_vld_sva <= system_input_system_input_or_tmp;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        mcu_ready_sva <= '0';
      ELSIF ( (fsm_output(5)) = '1' ) THEN
        mcu_ready_sva <= if_if_if_and_tmp OR mcu_ready_sva;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pixel_processing_if_pixel_processing_if_if_nor_itm <= '0';
        system_input_output_vld_sva_dfm_st_1 <= '0';
        else_io_read_in_data_vld_rsc_svs_st_1 <= '0';
      ELSIF ( reg_pixel_processing_if_pixel_processing_if_if_pixel_processing_if_if_and_cse
          = '1' ) THEN
        pixel_processing_if_pixel_processing_if_if_nor_itm <= NOT(TO_STDLOGIC(pixel_processing_if_if_acc_tmp/=STD_LOGIC_VECTOR'("000"))
            OR (pixel_processing_frame_sva(0)));
        system_input_output_vld_sva_dfm_st_1 <= system_input_system_input_or_tmp;
        else_io_read_in_data_vld_rsc_svs_st_1 <= in_data_vld_rsci_d;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pixel_processing_if_asn_itm <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( (mcu_ready_sva AND (fsm_output(5))) = '1' ) THEN
        pixel_processing_if_asn_itm <= pixel_processing_threshold_sva;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        median_max_7_lpi_1_dfm <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( ((mcu_ready_sva AND L1b_if_acc_15_itm_3 AND (fsm_output(5))) OR and_104_rgt)
          = '1' ) THEN
        median_max_7_lpi_1_dfm <= MUX_v_3_2_2(median_max2_7_lpi_1_dfm_mx0, median_max2_8_lpi_1_dfm_mx0,
            and_104_rgt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        median_max_5_3_lpi_1_dfm <= STD_LOGIC_VECTOR'( "000");
        median_max_6_lpi_1_dfm <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( reg_median_median_max_or_2_cse = '1' ) THEN
        median_max_5_3_lpi_1_dfm <= MUX_v_3_2_2(median_max2_5_3_lpi_1_dfm_mx0, L1b_asn_4_mx1w1,
            median_max_and_7_rgt);
        median_max_6_lpi_1_dfm <= MUX_v_3_2_2(L1b_asn_4_mx1w1, median_max2_5_3_lpi_1_dfm_mx0,
            median_max_and_7_rgt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        median_max_4_1_lpi_1_dfm <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( ((mcu_ready_sva AND L1b_if_acc_13_itm_3 AND (fsm_output(5))) OR and_108_rgt)
          = '1' ) THEN
        median_max_4_1_lpi_1_dfm <= MUX_v_3_2_2(median_max2_4_lpi_1_dfm_mx0, median_max_2_lpi_1_dfm_mx0,
            and_108_rgt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        buffer_sel_1_0_sva_1 <= '0';
      ELSIF ( (reg_system_input_system_input_output_vld_and_cse OR (fsm_output(2)))
          = '1' ) THEN
        buffer_sel_1_0_sva_1 <= buffer_sel_1_0_sva_dfm_mx0 OR (NOT(mcu_ready_sva
            AND (fsm_output(3))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        asn_itm <= '0';
      ELSIF ( ((fsm_output(6)) OR (fsm_output(2))) = '1' ) THEN
        asn_itm <= mcu_ready_sva;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        clip_window_last_row_0_sva_7 <= '0';
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        clip_window_last_row_0_sva_7 <= clip_window_clip_window_and_tmp;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pixel_processing_if_if_1_asn_itm <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        pixel_processing_if_if_1_asn_itm <= pixel_processing_frame_sva;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        pixel_processing_if_if_1_pixel_processing_if_if_1_if_and_svs_1 <= '0';
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        pixel_processing_if_if_1_pixel_processing_if_if_1_if_and_svs_1 <= pixel_processing_if_if_1_pixel_processing_if_if_1_if_and_svs;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_land_1_lpi_1_dfm_1 <= '0';
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        system_input_land_1_lpi_1_dfm_1 <= system_input_land_1_lpi_1_dfm;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        median_max2_1_lpi_1_dfm <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        median_max2_1_lpi_1_dfm <= MUX_v_3_2_2(median_max2_0_lpi_1_dfm_1_mx0, median_max_1_2_lpi_1_dfm_mx0,
            median_max2_and_5_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        median_max_2_2_lpi_1_dfm <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        median_max_2_2_lpi_1_dfm <= MUX_v_3_2_2(L1b_asn_44_mx0w1, median_max2_2_2_lpi_1_dfm_mx0,
            median_max_and_3_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        median_max2_3_2_lpi_1_dfm <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        median_max2_3_2_lpi_1_dfm <= MUX_v_3_2_2(median_max_2_1_lpi_1_dfm_mx0, median_max_3_1_lpi_1_dfm_mx0,
            median_max2_and_3_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        median_max_4_2_lpi_1_dfm <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        median_max_4_2_lpi_1_dfm <= MUX_v_3_2_2(median_max2_3_1_lpi_1_dfm_mx0, median_max2_4_1_lpi_1_dfm_mx0,
            median_max_and_1_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        median_max2_5_1_lpi_1_dfm <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        median_max2_5_1_lpi_1_dfm <= MUX_v_3_2_2(system_input_window_8_sva, system_input_window_7_sva,
            median_max2_median_max2_nor_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        clip_window_first_row_0_sva_5 <= '0';
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        clip_window_first_row_0_sva_5 <= clip_window_clip_window_nor_tmp;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        clip_window_last_col_0_sva_3 <= '0';
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        clip_window_last_col_0_sva_3 <= clip_window_clip_window_and_1_tmp;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        system_input_output_vld_sva_dfm <= '0';
      ELSIF ( or_tmp_56 = '0' ) THEN
        system_input_output_vld_sva_dfm <= system_input_system_input_or_tmp;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        buffer_sel_1_0_sva_dfm <= '0';
      ELSIF ( (fsm_output(4)) = '0' ) THEN
        buffer_sel_1_0_sva_dfm <= buffer_sel_1_0_sva_dfm_mx0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        and_2_cse <= '0';
      ELSIF ( (fsm_output(3)) = '1' ) THEN
        and_2_cse <= and_2_tmp;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        and_itm <= '0';
      ELSIF ( (fsm_output(3)) = '1' ) THEN
        and_itm <= pixel_processing_if_if_1_pixel_processing_if_if_1_if_and_svs AND
            system_input_land_1_lpi_1_dfm AND system_input_system_input_or_tmp AND
            in_data_vld_rsci_d AND mcu_ready_sva;
      END IF;
    END IF;
  END PROCESS;
  and_102_nl <= and_dcpl_11 AND (NOT z_out_1_3);
  system_input_if_2_qelse_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(system_input_r_sva)
      + SIGNED'( "00000000000000000000000000000001"), 32));
  system_input_if_2_system_input_if_2_nand_nl <= NOT(TO_STDLOGIC(system_input_r_sva=STD_LOGIC_VECTOR'("00000000000000000000000011101111")));
  system_input_if_1_qelse_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(system_input_r_filter_sva)
      + SIGNED'( "00000000000000000000000000000001"), 32));
  clip_window_switch_lp_2_not_4_nl <= NOT clip_window_clip_window_and_tmp;
  system_input_else_2_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(system_input_c_sva)
      + SIGNED'( "00000000000000000000000000000001"), 32));
  median_max2_and_5_nl <= z_out_3 AND (NOT (fsm_output(4)));
  median_max_and_3_nl <= z_out_1_3 AND (NOT (fsm_output(4)));
  median_max2_and_3_nl <= z_out_5_3 AND (NOT (fsm_output(4)));
  median_max_and_1_nl <= z_out_6_3 AND (NOT (fsm_output(4)));
  median_max2_median_max2_nor_nl <= NOT((NOT(clip_window_clip_window_and_tmp OR (NOT
      z_out_2_3))) OR (fsm_output(4)));
  thresholding_if_mux1h_3_nl <= MUX1HOT_v_3_3_2((NOT pixel_processing_if_asn_itm),
      median_max2_0_lpi_1_dfm_1_mx0, median_max_8_lpi_1_dfm_mx0, STD_LOGIC_VECTOR'(
      (fsm_output(6)) & (fsm_output(3)) & (fsm_output(5))));
  thresholding_if_mux1h_4_nl <= MUX1HOT_v_3_3_2(median_max_5_lpi_1_dfm_mx0, (NOT
      median_max_1_2_lpi_1_dfm_mx0), (NOT median_max2_9_lpi_1_dfm_1_mx0), STD_LOGIC_VECTOR'(
      (fsm_output(6)) & (fsm_output(3)) & (fsm_output(5))));
  acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & thresholding_if_mux1h_3_nl
      & '1') + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(thresholding_if_mux1h_4_nl &
      '1'), 4), 5), 5));
  z_out_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_nl), 5)), 4);
  L1b_if_mux1h_3_nl <= MUX1HOT_v_3_3_2(median_max2_1_lpi_1_dfm, median_max2_5_lpi_1_dfm_mx0,
      L1b_asn_44_mx0w1, STD_LOGIC_VECTOR'( (fsm_output(5)) & (fsm_output(6)) & (fsm_output(3))));
  L1b_if_mux1h_4_nl <= MUX1HOT_v_3_3_2((NOT median_max2_2_lpi_1_dfm_mx0), (NOT median_max2_6_lpi_1_dfm_mx0),
      (NOT median_max2_2_2_lpi_1_dfm_mx0), STD_LOGIC_VECTOR'( (fsm_output(5)) & (fsm_output(6))
      & (fsm_output(3))));
  acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1b_if_mux1h_3_nl & '1')
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(L1b_if_mux1h_4_nl & '1'), 4), 5), 5));
  z_out_1_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_1_nl), 5)),
      4);
  L1a_if_mux1h_6_nl <= MUX1HOT_v_3_3_2(median_max_6_lpi_1_dfm, system_input_window_7_sva,
      median_max2_7_1_lpi_1_dfm_mx0, STD_LOGIC_VECTOR'( (fsm_output(6)) & (fsm_output(3))
      & (fsm_output(5))));
  clip_window_mux_2_nl <= MUX_v_3_2_2(system_input_window_8_sva, system_input_window_7_sva,
      clip_window_clip_window_and_tmp);
  L1a_if_mux1h_7_nl <= MUX1HOT_v_3_3_2((NOT median_max_7_lpi_1_dfm), (NOT clip_window_mux_2_nl),
      (NOT pixel_processing_window_8_lpi_1_dfm), STD_LOGIC_VECTOR'( (fsm_output(6))
      & (fsm_output(3)) & (fsm_output(5))));
  acc_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1a_if_mux1h_6_nl & '1')
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(L1a_if_mux1h_7_nl & '1'), 4), 5), 5));
  z_out_2_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_2_nl), 5)),
      4);
  L1a_if_mux1h_8_nl <= MUX1HOT_v_3_3_2(median_max_4_1_lpi_1_dfm, pixel_processing_window_0_lpi_1_dfm,
      median_max_4_2_lpi_1_dfm, STD_LOGIC_VECTOR'( (fsm_output(6)) & (fsm_output(3))
      & (fsm_output(5))));
  L1a_if_mux1h_9_nl <= MUX1HOT_v_3_3_2((NOT median_max_5_3_lpi_1_dfm), (NOT clip_window_qr_lpi_1_dfm_mx0),
      (NOT median_max_5_2_lpi_1_dfm_mx0), STD_LOGIC_VECTOR'( (fsm_output(6)) & (fsm_output(3))
      & (fsm_output(5))));
  acc_3_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1a_if_mux1h_8_nl & '1')
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(L1a_if_mux1h_9_nl & '1'), 4), 5), 5));
  z_out_3_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_3_nl), 5)),
      4);
  L1a_if_mux_9_nl <= MUX_v_3_2_2(pixel_processing_window_2_lpi_1_dfm, median_max2_5_1_lpi_1_dfm,
      fsm_output(5));
  L1a_if_mux_10_nl <= MUX_v_3_2_2((NOT clip_window_qr_3_lpi_1_dfm_mx0), (NOT median_max2_6_1_lpi_1_dfm_mx0),
      fsm_output(5));
  acc_4_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1a_if_mux_9_nl & '1')
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(L1a_if_mux_10_nl & '1'), 4), 5), 5));
  z_out_4_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_4_nl), 5)),
      4);
  L1a_if_mux_11_nl <= MUX_v_3_2_2(median_max_2_1_lpi_1_dfm_mx0, median_max2_5_2_lpi_1_dfm_mx0,
      fsm_output(5));
  L1a_if_mux_12_nl <= MUX_v_3_2_2((NOT median_max_3_1_lpi_1_dfm_mx0), (NOT median_max_7_1_lpi_1_dfm_mx0),
      fsm_output(5));
  acc_5_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1a_if_mux_11_nl & '1')
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(L1a_if_mux_12_nl & '1'), 4), 5), 5));
  z_out_5_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_5_nl), 5)),
      4);
  L1b_if_mux_6_nl <= MUX_v_3_2_2(median_max2_3_1_lpi_1_dfm_mx0, median_max2_3_2_lpi_1_dfm,
      fsm_output(5));
  L1b_if_mux_7_nl <= MUX_v_3_2_2((NOT median_max2_4_1_lpi_1_dfm_mx0), (NOT median_max2_4_2_lpi_1_dfm_mx0),
      fsm_output(5));
  acc_6_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1b_if_mux_6_nl & '1')
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(L1b_if_mux_7_nl & '1'), 4), 5), 5));
  z_out_6_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_6_nl), 5)),
      4);
  L1a_if_mux_13_nl <= MUX_v_3_2_2(median_max2_0_lpi_1_dfm_mx0, median_max_2_2_lpi_1_dfm,
      fsm_output(5));
  L1a_if_mux_14_nl <= MUX_v_3_2_2((NOT median_max_1_1_lpi_1_dfm_mx0), (NOT median_max_3_lpi_1_dfm_mx0),
      fsm_output(5));
  acc_7_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1a_if_mux_13_nl & '1')
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(L1a_if_mux_14_nl & '1'), 4), 5), 5));
  z_out_7_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_7_nl), 5)),
      4);
  L1b_if_mux_8_nl <= MUX_v_3_2_2(median_max2_1_1_lpi_1_dfm_mx0, median_max_6_2_lpi_1_dfm_mx0,
      fsm_output(5));
  L1b_if_mux_9_nl <= MUX_v_3_2_2((NOT median_max2_2_1_lpi_1_dfm_mx0), (NOT median_max2_8_1_lpi_1_dfm_mx0),
      fsm_output(5));
  acc_8_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & L1b_if_mux_8_nl & '1')
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(L1b_if_mux_9_nl & '1'), 4), 5), 5));
  z_out_8_3 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_8_nl), 5)),
      4);
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    filter
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;
USE work.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY filter IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    in_data_rsc_z : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    in_data_rsc_lz : OUT STD_LOGIC;
    in_data_vld_rsc_z : IN STD_LOGIC;
    out_data_rsc_z : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
    out_data_rsc_lz : OUT STD_LOGIC;
    mcu_data_rsc_adr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    mcu_data_rsc_q : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    mcu_data_rsc_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    mcu_data_rsc_we : OUT STD_LOGIC
  );
END filter;

ARCHITECTURE v1 OF filter IS
  -- Default Constants
  SIGNAL PWR : STD_LOGIC;

  -- Interconnect Declarations
  SIGNAL mcu_data_rsci_adr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL mcu_data_rsci_d_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mcu_data_rsci_we_d : STD_LOGIC;
  SIGNAL mcu_data_rsci_q_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mcu_data_rsci_ram_rw_A_internal_RMASK_B_d : STD_LOGIC;
  SIGNAL buffer_buf_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_rsci_d_d : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_buf_rsci_we_d : STD_LOGIC;
  SIGNAL buffer_buf_rsci_re_d : STD_LOGIC;
  SIGNAL buffer_buf_rsci_q_d : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_buf_rsc_we : STD_LOGIC;
  SIGNAL buffer_buf_rsc_d : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_buf_rsc_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_rsc_re : STD_LOGIC;
  SIGNAL buffer_buf_rsc_q : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_buf_rsc_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);

  SIGNAL buffer_buf_rsc_comp_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_rsc_comp_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_rsc_comp_d : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_buf_rsc_comp_q : STD_LOGIC_VECTOR (2 DOWNTO 0);

  COMPONENT Xilinx_RAMS_BLOCK_SPRAM_RBW_rwport_32_9_512_4_gen
    PORT(
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      q : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      adr : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      adr_d : IN STD_LOGIC_VECTOR (8 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      we_d : IN STD_LOGIC;
      q_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      ram_rw_A_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL mcu_data_rsci_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mcu_data_rsci_q : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mcu_data_rsci_adr : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL mcu_data_rsci_adr_d_1 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL mcu_data_rsci_d_d_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL mcu_data_rsci_q_d_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);

  COMPONENT Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_3_10_640_7_gen
    PORT(
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      re : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      radr : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (9 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      we_d : IN STD_LOGIC;
      re_d : IN STD_LOGIC;
      q_d : OUT STD_LOGIC_VECTOR (2 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL buffer_buf_rsci_d : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_buf_rsci_wadr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_rsci_q : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_buf_rsci_radr : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_rsci_radr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_rsci_wadr_d_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL buffer_buf_rsci_d_d_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL buffer_buf_rsci_q_d_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);

  COMPONENT filter_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      in_data_rsc_z : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      in_data_rsc_lz : OUT STD_LOGIC;
      in_data_vld_rsc_z : IN STD_LOGIC;
      out_data_rsc_z : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
      out_data_rsc_lz : OUT STD_LOGIC;
      mcu_data_rsci_adr_d : OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
      mcu_data_rsci_d_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      mcu_data_rsci_we_d : OUT STD_LOGIC;
      mcu_data_rsci_q_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      mcu_data_rsci_ram_rw_A_internal_RMASK_B_d : OUT STD_LOGIC;
      buffer_buf_rsci_radr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      buffer_buf_rsci_wadr_d : OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
      buffer_buf_rsci_d_d : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
      buffer_buf_rsci_we_d : OUT STD_LOGIC;
      buffer_buf_rsci_re_d : OUT STD_LOGIC;
      buffer_buf_rsci_q_d : IN STD_LOGIC_VECTOR (2 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL filter_core_inst_in_data_rsc_z : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL filter_core_inst_out_data_rsc_z : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL filter_core_inst_mcu_data_rsci_adr_d : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL filter_core_inst_mcu_data_rsci_d_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL filter_core_inst_mcu_data_rsci_q_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL filter_core_inst_buffer_buf_rsci_radr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL filter_core_inst_buffer_buf_rsci_wadr_d : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL filter_core_inst_buffer_buf_rsci_d_d : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL filter_core_inst_buffer_buf_rsci_q_d : STD_LOGIC_VECTOR (2 DOWNTO 0);

BEGIN
  -- Default Constant Signal Assignments
  PWR <= '1';

  buffer_buf_rsc_comp : work.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      data_width => 3,
      addr_width => 10,
      depth => 640
      )
    PORT MAP(
      radr => buffer_buf_rsc_comp_radr,
      wadr => buffer_buf_rsc_comp_wadr,
      d => buffer_buf_rsc_comp_d,
      we => buffer_buf_rsc_we,
      re => buffer_buf_rsc_re,
      clk => clk,
      q => buffer_buf_rsc_comp_q
    );
  buffer_buf_rsc_comp_radr <= buffer_buf_rsc_radr;
  buffer_buf_rsc_comp_wadr <= buffer_buf_rsc_wadr;
  buffer_buf_rsc_comp_d <= buffer_buf_rsc_d;
  buffer_buf_rsc_q <= buffer_buf_rsc_comp_q;

  mcu_data_rsci : Xilinx_RAMS_BLOCK_SPRAM_RBW_rwport_32_9_512_4_gen
    PORT MAP(
      we => mcu_data_rsc_we,
      d => mcu_data_rsci_d,
      q => mcu_data_rsci_q,
      adr => mcu_data_rsci_adr,
      adr_d => mcu_data_rsci_adr_d_1,
      d_d => mcu_data_rsci_d_d_1,
      we_d => mcu_data_rsci_we_d,
      q_d => mcu_data_rsci_q_d_1,
      ram_rw_A_internal_RMASK_B_d => mcu_data_rsci_ram_rw_A_internal_RMASK_B_d
    );
  mcu_data_rsc_d <= mcu_data_rsci_d;
  mcu_data_rsci_q <= mcu_data_rsc_q;
  mcu_data_rsc_adr <= mcu_data_rsci_adr;
  mcu_data_rsci_adr_d_1 <= mcu_data_rsci_adr_d;
  mcu_data_rsci_d_d_1 <= mcu_data_rsci_d_d;
  mcu_data_rsci_q_d <= mcu_data_rsci_q_d_1;

  buffer_buf_rsci : Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_3_10_640_7_gen
    PORT MAP(
      we => buffer_buf_rsc_we,
      d => buffer_buf_rsci_d,
      wadr => buffer_buf_rsci_wadr,
      re => buffer_buf_rsc_re,
      q => buffer_buf_rsci_q,
      radr => buffer_buf_rsci_radr,
      radr_d => buffer_buf_rsci_radr_d_1,
      wadr_d => buffer_buf_rsci_wadr_d_1,
      d_d => buffer_buf_rsci_d_d_1,
      we_d => buffer_buf_rsci_we_d,
      re_d => buffer_buf_rsci_re_d,
      q_d => buffer_buf_rsci_q_d_1
    );
  buffer_buf_rsc_d <= buffer_buf_rsci_d;
  buffer_buf_rsc_wadr <= buffer_buf_rsci_wadr;
  buffer_buf_rsci_q <= buffer_buf_rsc_q;
  buffer_buf_rsc_radr <= buffer_buf_rsci_radr;
  buffer_buf_rsci_radr_d_1 <= buffer_buf_rsci_radr_d;
  buffer_buf_rsci_wadr_d_1 <= buffer_buf_rsci_wadr_d;
  buffer_buf_rsci_d_d_1 <= buffer_buf_rsci_d_d;
  buffer_buf_rsci_q_d <= buffer_buf_rsci_q_d_1;

  filter_core_inst : filter_core
    PORT MAP(
      clk => clk,
      rst => rst,
      in_data_rsc_z => filter_core_inst_in_data_rsc_z,
      in_data_rsc_lz => in_data_rsc_lz,
      in_data_vld_rsc_z => in_data_vld_rsc_z,
      out_data_rsc_z => filter_core_inst_out_data_rsc_z,
      out_data_rsc_lz => out_data_rsc_lz,
      mcu_data_rsci_adr_d => filter_core_inst_mcu_data_rsci_adr_d,
      mcu_data_rsci_d_d => filter_core_inst_mcu_data_rsci_d_d,
      mcu_data_rsci_we_d => mcu_data_rsci_we_d,
      mcu_data_rsci_q_d => filter_core_inst_mcu_data_rsci_q_d,
      mcu_data_rsci_ram_rw_A_internal_RMASK_B_d => mcu_data_rsci_ram_rw_A_internal_RMASK_B_d,
      buffer_buf_rsci_radr_d => filter_core_inst_buffer_buf_rsci_radr_d,
      buffer_buf_rsci_wadr_d => filter_core_inst_buffer_buf_rsci_wadr_d,
      buffer_buf_rsci_d_d => filter_core_inst_buffer_buf_rsci_d_d,
      buffer_buf_rsci_we_d => buffer_buf_rsci_we_d,
      buffer_buf_rsci_re_d => buffer_buf_rsci_re_d,
      buffer_buf_rsci_q_d => filter_core_inst_buffer_buf_rsci_q_d
    );
  filter_core_inst_in_data_rsc_z <= in_data_rsc_z;
  out_data_rsc_z <= filter_core_inst_out_data_rsc_z;
  mcu_data_rsci_adr_d <= filter_core_inst_mcu_data_rsci_adr_d;
  mcu_data_rsci_d_d <= filter_core_inst_mcu_data_rsci_d_d;
  filter_core_inst_mcu_data_rsci_q_d <= mcu_data_rsci_q_d;
  buffer_buf_rsci_radr_d <= filter_core_inst_buffer_buf_rsci_radr_d;
  buffer_buf_rsci_wadr_d <= filter_core_inst_buffer_buf_rsci_wadr_d;
  buffer_buf_rsci_d_d <= filter_core_inst_buffer_buf_rsci_d_d;
  filter_core_inst_buffer_buf_rsci_q_d <= buffer_buf_rsci_q_d;

END v1;



